# NOTE: update this with your service name
service: backend-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    AZURE_MAPS_KEY: ${env:AZURE_MAPS_KEY}
    AZURE_MAPS_CLIENT_ID: ${env:AZURE_MAPS_CLIENT_ID}
    AZURE_MAPS_ADDRESS_ENDPOINT: ${env:AZURE_MAPS_ADDRESS_ENDPOINT}
    COMPANIES_TABLE_NAME: ${COMPANIES_TABLE_NAME}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'

functions:
  # Defines an HTTP API endpoint that calls the main function in address/get.js
  # - path: url path is /address/{postalCode}/{houseNumber}
  # - method: GET request
  addressGet:
    handler: address/get.main
    events:
      - http:
          path: address/{postalCode}/{houseNumber}
          method: get

  # Defines an HTTP API endpoint that calls the main function in company/get.js
  # - path: url path is /company
  # - method: GET request
  companyGet:
    handler: company/get.main
    events:
      - http:
          path: company
          method: get

  # Defines an HTTP API endpoint that calls the main function in company/create.js
  # - path: url path is /company
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  companyCreate:
    handler: company/create.main
    events:
      - http:
          path: company
          method: post
          cors: true
          authorizer: aws_iam
