# NOTE: update this with your service name
service: backend-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - ./plugins/offline-invalidate.js
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    GEOCODE_API_KEY: ${env:GEOCODE_API_KEY}
    GEOCODE_ENDPOINT: ${env:GEOCODE_ENDPOINT}
    GEOCODE_REGION: ${env:GEOCODE_REGION}
    COMPANIES_TABLE_NAME: ${env:COMPANIES_TABLE_NAME}
    USERS_TABLE_NAME: ${env:USERS_TABLE_NAME}
    COUPONS_TABLE_NAME: ${env:COUPONS_TABLE_NAME}
    STRIPE_API_SECRET_KEY: ${env:STRIPE_API_SECRET_KEY}
    STRIPE_API_CLIENT_ID: ${env:STRIPE_API_CLIENT_ID}
    STRIPE_CONNECT_URL: ${env:STRIPE_CONNECT_URL}
    APPLICATION_URL: ${env:APPLICATION_URL}
    WEBFRONTEND_URL: ${env:WEBFRONTEND_URL}
    SEND_COUPON_EMAIL: ${env:COUPON_EMAIL}
    STRIPE_CHECKOUT_REDIRECT_SUCCESS: ${env:STRIPE_CHECKOUT_REDIRECT_SUCCESS}
    STRIPE_CHECKOUT_REDIRECT_CANCEL: ${env:STRIPE_CHECKOUT_REDIRECT_CANCEL}
    STRIPE_WEBHOOK_CHECKOUT_COMPLETED_SECRET_KEY: ${env:STRIPE_WEBHOOK_CHECKOUT_COMPLETED_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'

functions:
  # Defines an HTTP API endpoint that calls the main function in address/get.js
  # - path: url path is /address/{postalCode}/{houseNumber}
  # - method: GET request
  addressGet:
    handler: address/get.main
    events:
      - http:
          path: address/{postalCode}/{houseNumber}
          method: get
          cors: true
  companyGet:
    handler: company/get.main
    events:
      - http:
          path: company/{id}
          method: get
  companiesGet:
    handler: company/getAll.main
    events:
      - http:
          path: companies
          method: get
          cors: true
  companyCreate:
    handler: company/create.main

  companyUpdate:
    handler: company/update.main
    events:
      - http:
          path: company/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  companyDelete:
    handler: company/delete.main
    events:
      - http:
          path: company/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  testCognito:
    handler: handler.test1
    events:
      - http:
          path: test1
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  preSignupLambdaFunction:
   handler: cognito/autoConfirmUser.main

  stripeConnectCallback:
    handler: stripe/connectCallback.main
    events:
      - http:
          path: stripe/connect/callback
          method: get

  stripeConnect:
    handler: stripe/connect.main
    events:
      - http:
          path: stripe/connect
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiGatewayAuthorizer

  stripeCheckoutSession:
    handler: stripe/createCheckoutSession.main
    events:
      - http:
          path: stripe/checkout-session
          method: get

  stripeCheckoutCompleted:
    handler: stripe/checkoutCompleted.main
    events:
      - http:
          path: stripe/checkout-completed
          method: post

  sendCouponEmail:
    handler: email/send-coupon.lambda.main
    events:
      - http:
          path: coupon
          method: get

resources:
  - ${file(resources/cognito.yml)}
