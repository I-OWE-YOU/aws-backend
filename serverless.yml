# NOTE: update this with your service name
service: backend-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-pseudo-parameters


provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    GEOCODE_API_KEY: ${env:GEOCODE_API_KEY}
    GEOCODE_ENDPOINT: ${env:GEOCODE_ENDPOINT}
    GEOCODE_REGION: ${env:GEOCODE_REGION}
    COMPANIES_TABLE_NAME: ${COMPANIES_TABLE_NAME}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'

functions:
  # Defines an HTTP API endpoint that calls the main function in address/get.js
  # - path: url path is /address/{postalCode}/{houseNumber}
  # - method: GET request
  addressGet:
    handler: address/get.main
    events:
      - http:
          path: address/{postalCode}/{houseNumber}
          method: get
  companyGet:
    handler: company/get.main
    events:
      - http:
          path: company/{id}
          method: get
  companyCreate:
    handler: company/create.main
    events:
      - http:
          path: company
          method: post
          cors: true
          authorizer: aws_iam

  companyUpdate:
    handler: company/update.main
    events:
      - http:
          path: company/{id}
          method: put
          cors: true
          authorizer: aws_iam

  companyDelete:
    handler: company/delete.main
    events:
      - http:
          path: company/{id}
          method: delete
          cors: true
          authroizer: aws_iam

  testCognito:
    handler: handler.test1
    events:
      - http:
          path: test1
          method: get
          cors: true
          authorizer: aws_iam
  preSignupLambdaFunction:
    handler: cognito/autoConfirmUser.main
resources:
      - ${file(resources/cognito.yml)}
